is specified.</param>
        </member>
        <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Core.EntityException" /> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException"/> class with no error message.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy">
            <summary>
            An <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy"/> that doesn't retry operations if they fail.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.Execute(System.Action)">
            <summary>
            Executes the specified operation once.
            </summary>
            <param name="operation">A delegate representing an executable operation that doesn't return any results.</param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.Execute``1(System.Func{``0})">
            <summary>
            Executes the specified operation once and returns the result.
            </summary>
            <typeparam name="TResult">
            The return type of <paramref name="operation" />.
            </typeparam>
            <param name="operation">
            A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
            <returns>The result from the operation.</returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Executes the specified asynchronous operation once, without retrying on failure.
            </summary>
            <param name="operation">A function that returns a started task.</param>
            <param name="cancellationToken">
            A cancellation token used to cancel the retry operation, but not operations that are already in flight
            or that already completed successfully.
            </param>
            <returns>
            A task that will run to completion if the original task completes successfully.
            </returns>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes the specified asynchro